{"version":3,"sources":["webpack:///./src/views/tradingviewDemo/tradingviewDemo.vue","webpack:///./src/views/tradingviewDemo/const/const.js","webpack:///src/views/tradingviewDemo/tradingviewDemo.vue","webpack:///./src/views/tradingviewDemo/tradingviewDemo.vue?2a81","webpack:///./src/views/tradingviewDemo/tradingviewDemo.vue?5dac"],"names":["render","_vm","this","_self","_c","_m","staticRenderFns","staticStyle","attrs","TradingViewConfig","debug","fullscreen","symbol","interval","localStorage","getItem","autosize","container","datafeed","library_path","locale","$t","timezone","disabled_features","enabled_features","theme","createAutoData","count","max","min","autoData","Array","Range","i","Rand","Math","random","push","round","name","props","components","data","tradingViewConfig","chart","feed","last_price","bars","page","loading","finish","methods","createFeed","_this_","Datafeed","updateFrequency","_datafeed","_subscribers","_requestsPending","that","update","listenerGUID","subscriptionRecord","resolution","datesRangeRight","parseInt","Date","valueOf","datesRangeLeft","periodLengthSeconds","_subscriptionRecord","getBars","symbolInfo","hasOwnProperty","length","lastBar","isNaN","lastBarTime","time","subscribers","listeners","isNewBar","Error","previousBar","setInterval","DataPulseUpdater","prototype","requiredPeriodsCount","daysCount","subscribeDataListener","newDataCallback","_logMessage","NaN","unsubscribeDataListener","Container","_configuration","supports_search","supports_group_request","supported_resolutions","supports_marks","supports_timescale_marks","exchanges","_barsPulseUpdater","_enableLogging","_callbacks","_initializationFinished","_fireEvent","event","argument","callbacksChain","message","on","callback","onReady","setTimeout","resolveSymbol","symbolName","onSymbolResolvedCallback","onResolveErrorCallback","Promise","resolve","then","adjustScale","periodParams","onHistoryCallback","onErrorCallback","firstDataRequest","current","klines","getListData2","catch","err","noData","getMarks","startDate","endDate","onDataCallback","marks","subscribeKline","uniqueID","createRandData","res","subscribeBars","onRealtimeCallback","subscribeUID","onResetCacheNeededCallback","cb","unsubscribeBars","buyColor","background","sellColor","bsAll","id","type","text","label","map","v","o","mark","getTime","color","labelFontColor","minSize","TradingView","widget","onChartReady","subscribe","createStudy","activeChart","resetData","lastPrice","low","p","obj","close","open","high","volume","d","size","reject","_gupiao","JSON","parse","stringify","gupiao","list","reverse","slice","arr","forEach","item","dayjs","c","h","l","concat","time_1","Data","Datasets","Time","Close","Open","High","Low","Volume","changePair","zoomOut","search","initTv","mounted","computed","lang","$i18n","watch","pair","newVal","oldVal","handler","val","value","deep","immediate","beforeDestroy","component"],"mappings":"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","file":"static/js/chunk-0993d74c.f7b7532d.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _vm._m(0)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',[_c('div',{staticStyle:{\"height\":\"100%\",\"width\":\"100%\",\"position\":\"absolute\"},attrs:{\"id\":\"chart_container\"}})])\n}]\n\nexport { render, staticRenderFns }","//导出k线图配置\r\nexport function TradingViewConfig1() {\r\n    return {\r\n        theme: 'Dark',\r\n        fullscreen: false, //屏幕尺寸\r\n        autosize: true, //自动适应容器大小\r\n        symbol: null, //函数赋值\r\n        // symbol:this_vue.currency1 + \":\"+ this_vue.currency2,\r\n        container_id: \"chart_container\",\r\n        datafeed: null, //函数赋值\r\n        // datafeed: this_vue.feed,\r\n        library_path: \"/custom_scripts/chart_main/\", //包文件\r\n        custom_css_url: 'chart.css',\r\n        locale: `${_vm.$t(\"locale\")}`, //语言，en：英文，zh：中文\r\n        timezone: 'Etc/UTC', //todo: ustawianie timezone'a po strefie usera\r\n        charts_storage_api_version: \"1.1\",\r\n        client_id: 'tradingview.com',\r\n        user_id: 'public_user_id',\r\n        debug: true,\r\n        //加载中样式\r\n        // loading_screen:{ backgroundColor: \"#00ff00\",foregroundColor: \"#000000\", }, //todo:do it\r\n        interval: '60',\r\n        // preset: \"mobile\",//是否移动端，移动端就没有什么控件\r\n        // timeframe:'',//todo: na koncu\r\n        toolbar_bg: \"#17171a\", //\"#20334d\",\r\n        // saved_data: this.savedData,\r\n        allow_symbol_change: true,\r\n        time_frames: [\r\n            { text: \"1y\", resolution: \"1W\" },\r\n            { text: \"6m\", resolution: \"3D\" },\r\n            { text: \"3m\", resolution: \"1D\" },\r\n            { text: \"1m\", resolution: \"1D\" },\r\n            { text: \"1w\", resolution: \"30\" },\r\n            { text: \"3d\", resolution: \"30\" },\r\n            { text: \"1d\", resolution: \"30\" },\r\n            { text: \"6h\", resolution: \"15\" },\r\n            { text: \"1h\", resolution: \"1\" }\r\n        ],\r\n        //图纸访问\r\n        drawings_access: {\r\n            type: 'black',\r\n            tools: [{ name: \"Regression Trend\" }] //todo: moje\r\n            // tools: [{name: \"Trend Line\", grayed: true}, {name: \"Trend Angle\", grayed: true}] //todo: bb\r\n        },\r\n        //禁用的功能\r\n        disabled_features: [\r\n            \"header_symbol_search\",\r\n            \"header_interval_dialog_button\",\r\n            \"show_interval_dialog_on_key_press\",\r\n            \"symbol_search_hot_key\",\r\n            \"study_dialog_search_control\",\r\n            \"display_market_status\",\r\n            \"header_compare\",\r\n            \"edit_buttons_in_legend\",\r\n            \"symbol_info\",\r\n            \"border_around_the_chart\",\r\n            \"main_series_scale_menu\",\r\n            \"star_some_intervals_by_default\",\r\n            \"datasource_copypaste\",\r\n            \"right_bar_stays_on_scroll\",\r\n            \"context_menus\",\r\n            \"go_to_date\",\r\n            \"compare_symbol\",\r\n            \"border_around_the_chart\",\r\n            \"timezone_menu\",\r\n            //左右移动，缩放，重置\r\n            // \"header_resolutions\",//todo: przetestowac\r\n            // \"control_bar\",//todo: przetestowac\r\n            // \"edit_buttons_in_legend\",//todo: przetestowac\r\n            \"remove_library_container_border\",\r\n            \"adaptive_logo\"\r\n        ],\r\n        //开启的功能\r\n        enabled_features: [\r\n            \"dont_show_boolean_study_arguments\",\r\n            \"use_localstorage_for_settings\",\r\n            \"remove_library_container_border\",\r\n            \"save_chart_properties_to_local_storage\",\r\n            \"side_toolbar_in_fullscreen_mode\", //全屏模式启动绘图功能\r\n            \"hide_last_na_study_output\",\r\n            // \"hide_left_toolbar_by_default\",//当用第一次进入隐藏左部工具栏\r\n            \"constraint_dialogs_movement\", //todo: nie do końca jestem pewien\r\n            // \"move_logo_to_main_pane\",//logo位置\r\n            \"chart_property_page_background\"\r\n        ],\r\n        //覆盖\r\n        studies_overrides: {\r\n            \"volume.volume.color.0\": \"#fe4761\",\r\n            \"volume.volume.color.1\": \"#3fcfb4\",\r\n            \"volume.volume.transparency\": 75,\r\n        },\r\n        //覆盖\r\n        overrides: {\r\n            \"paneProperties.background\": \"#ff0000\",\r\n            // \"indicator_name.input_name\":\"volume\",\r\n            \"symbolWatermarkProperties.color\": \"rgba(0,0,0, 0)\",\r\n            // \"paneProperties.background\": \"#20334d\",//\"#20334d\",\r\n            //网格\r\n            \"paneProperties.vertGridProperties.color\": \"#ff00000\",\r\n            \"paneProperties.horzGridProperties.color\": \"#344568\",\r\n            \"paneProperties.crossHairProperties.color\": \"#58637a\",\r\n            \"paneProperties.crossHairProperties.style\": 2,\r\n            \"mainSeriesProperties.style\": 9,\r\n            \"mainSeriesProperties.showCountdown\": false,\r\n            \"scalesProperties.showSeriesLastValue\": true,\r\n            \"mainSeriesProperties.visible\": false,\r\n            \"mainSeriesProperties.showPriceLine\": false,\r\n            \"mainSeriesProperties.priceLineWidth\": 1,\r\n            \"mainSeriesProperties.lockScale\": false,\r\n            \"mainSeriesProperties.minTick\": \"default\",\r\n            \"mainSeriesProperties.extendedHours\": false,\r\n            \"volumePaneSize\": \"tiny\",\r\n            editorFontsList: [\"Lato\", \"Arial\", \"Verdana\", \"Courier New\", \"Times New Roman\"],\r\n            \"paneProperties.topMargin\": 5,\r\n            \"paneProperties.bottomMargin\": 5,\r\n            \"paneProperties.leftAxisProperties.autoScale\": true,\r\n            \"paneProperties.leftAxisProperties.autoScaleDisabled\": false,\r\n            \"paneProperties.leftAxisProperties.percentage\": false,\r\n            \"paneProperties.leftAxisProperties.percentageDisabled\": false,\r\n            \"paneProperties.leftAxisProperties.log\": false,\r\n            \"paneProperties.leftAxisProperties.logDisabled\": false,\r\n            \"paneProperties.leftAxisProperties.alignLabels\": true,\r\n            // \"paneProperties.legendProperties.showStudyArguments\": true,\r\n            \"paneProperties.legendProperties.showStudyTitles\": true,\r\n            \"paneProperties.legendProperties.showStudyValues\": true,\r\n            \"paneProperties.legendProperties.showSeriesTitle\": true,\r\n            \"paneProperties.legendProperties.showSeriesOHLC\": true,\r\n            \"scalesProperties.showLeftScale\": false,\r\n            \"scalesProperties.showRightScale\": true,\r\n            \"scalesProperties.backgroundColor\": \"#17171a\", //\"#20334d\",\r\n            // 坐标轴和刻度标签颜色\r\n            \"scalesProperties.lineColor\": \"#46587b\",\r\n            \"scalesProperties.textColor\": \"#8f98ad\",\r\n            \"scalesProperties.scaleSeriesOnly\": false,\r\n            \"mainSeriesProperties.priceAxisProperties.autoScale\": true,\r\n            \"mainSeriesProperties.priceAxisProperties.autoScaleDisabled\": false,\r\n            \"mainSeriesProperties.priceAxisProperties.percentage\": false,\r\n            \"mainSeriesProperties.priceAxisProperties.percentageDisabled\": false,\r\n            \"mainSeriesProperties.priceAxisProperties.log\": false,\r\n            \"mainSeriesProperties.priceAxisProperties.logDisabled\": false,\r\n            \"mainSeriesProperties.candleStyle.upColor\": \"#3fcfb4\",\r\n            \"mainSeriesProperties.candleStyle.downColor\": \"#fe4761\",\r\n            \"mainSeriesProperties.candleStyle.drawWick\": true, // 烛心\r\n            \"mainSeriesProperties.candleStyle.drawBorder\": true, //边框\r\n            \"mainSeriesProperties.candleStyle.borderColor\": \"#3fcfb4\",\r\n            \"mainSeriesProperties.candleStyle.borderUpColor\": \"#3fcfb4\", //边框颜色\r\n            \"mainSeriesProperties.candleStyle.borderDownColor\": \"#fe4761\", //边框颜色\r\n            \"mainSeriesProperties.candleStyle.wickColor\": \"#737375\",\r\n            \"mainSeriesProperties.candleStyle.wickUpColor\": \"#3fcfb4\", // 烛心颜色\r\n            \"mainSeriesProperties.candleStyle.wickDownColor\": \"#fe4761\",\r\n            \"mainSeriesProperties.candleStyle.barColorsOnPrevClose\": false,\r\n            \"mainSeriesProperties.hollowCandleStyle.upColor\": \"#3fcfb4\",\r\n            \"mainSeriesProperties.hollowCandleStyle.downColor\": \"#fe4761\",\r\n            \"mainSeriesProperties.hollowCandleStyle.drawWick\": true,\r\n            \"mainSeriesProperties.hollowCandleStyle.drawBorder\": true,\r\n            \"mainSeriesProperties.hollowCandleStyle.borderColor\": \"#3fcfb4\",\r\n            \"mainSeriesProperties.hollowCandleStyle.borderUpColor\": \"#3fcfb4\",\r\n            \"mainSeriesProperties.hollowCandleStyle.borderDownColor\": \"#fe4761\",\r\n            \"mainSeriesProperties.hollowCandleStyle.wickColor\": \"#737375\",\r\n            \"mainSeriesProperties.hollowCandleStyle.wickUpColor\": \"#3fcfb4\",\r\n            \"mainSeriesProperties.hollowCandleStyle.wickDownColor\": \"#fe4761\",\r\n            \"mainSeriesProperties.haStyle.upColor\": \"#3fcfb4\",\r\n            \"mainSeriesProperties.haStyle.downColor\": \"#fe4761\",\r\n            \"mainSeriesProperties.haStyle.drawWick\": true,\r\n            \"mainSeriesProperties.haStyle.drawBorder\": true,\r\n            \"mainSeriesProperties.haStyle.borderColor\": \"#3fcfb4\",\r\n            \"mainSeriesProperties.haStyle.borderUpColor\": \"#3fcfb4\",\r\n            \"mainSeriesProperties.haStyle.borderDownColor\": \"#fe4761\",\r\n            \"mainSeriesProperties.haStyle.wickColor\": \"#737375\",\r\n            \"mainSeriesProperties.haStyle.wickUpColor\": \"#3fcfb4\",\r\n            \"mainSeriesProperties.haStyle.wickDownColor\": \"#fe4761\",\r\n            \"mainSeriesProperties.haStyle.barColorsOnPrevClose\": false,\r\n            \"mainSeriesProperties.barStyle.upColor\": \"#3fcfb4\",\r\n            \"mainSeriesProperties.barStyle.downColor\": \"#fe4761\",\r\n            \"mainSeriesProperties.barStyle.barColorsOnPrevClose\": false,\r\n            \"mainSeriesProperties.barStyle.dontDrawOpen\": false,\r\n            \"mainSeriesProperties.lineStyle.color\": \"#0cbef3\",\r\n            \"mainSeriesProperties.lineStyle.linestyle\": 0,\r\n            \"mainSeriesProperties.lineStyle.linewidth\": 1,\r\n            \"mainSeriesProperties.lineStyle.priceSource\": \"close\",\r\n            \"mainSeriesProperties.areaStyle.color1\": \"#0cbef3\",\r\n            \"mainSeriesProperties.areaStyle.color2\": \"#0098c4\",\r\n            \"mainSeriesProperties.areaStyle.linecolor\": \"#0cbef3\",\r\n            \"mainSeriesProperties.areaStyle.linestyle\": 0,\r\n            \"mainSeriesProperties.areaStyle.linewidth\": 1,\r\n            \"mainSeriesProperties.areaStyle.priceSource\": \"close\",\r\n            \"mainSeriesProperties.areaStyle.transparency\": 80\r\n        }\r\n    }\r\n}\r\n\r\n//导出k线图配置\r\nexport function TradingViewConfig2() {\r\n    return {\r\n        container_id: \"chart_container\",\r\n        library_path: \"charting_library/\",\r\n        // custom_css_url: \"/tv-charting-library/custom-styles.css\",\r\n        locale: \"en\",\r\n        autosize: true,\r\n        time_frames: [],\r\n        // toolbar_bg: \"#1c1c28\",\r\n        disabled_features: [\"header_symbol_search\", \"header_compare\", \"symbol_search_hot_key\", \"compare_symbol\", \"symbol_info\", \"go_to_date\", \"timeframes_toolbar\", \"use_localstorage_for_settings\"],\r\n        enabled_features: [\"remove_library_container_border\", \"hide_last_na_study_output\", \"dont_show_boolean_study_arguments\", \"hide_left_toolbar_by_default\"],\r\n        overrides: {\r\n            \"paneProperties.background\": \"#17171a\",\r\n            \"paneProperties.horzGridProperties.color\": \"#252537\",\r\n            \"paneProperties.vertGridProperties.color\": \"#252537\",\r\n            \"paneProperties.crossHairProperties.style\": 1,\r\n            \"paneProperties.legendProperties.showBarChange\": !1,\r\n            \"mainSeriesProperties.style\": 1,\r\n            \"mainSeriesProperties.candleStyle.upColor\": \"#3fb68b\",\r\n            \"mainSeriesProperties.candleStyle.borderUpColor\": \"#3fb68b\",\r\n            \"mainSeriesProperties.candleStyle.wickUpColor\": \"#3fb68b\",\r\n            \"mainSeriesProperties.candleStyle.downColor\": \"#ff5353\",\r\n            \"mainSeriesProperties.candleStyle.borderDownColor\": \"#ff5353\",\r\n            \"mainSeriesProperties.candleStyle.wickDownColor\": \"#ff5353\",\r\n            \"mainSeriesProperties.statusViewStyle.symbolTextSource\": \"ticker\",\r\n            \"scalesProperties.textColor\": \"#c3c2d4\",\r\n            \"scalesProperties.backgroundColor\": \"#1c1c28\",\r\n            \"scalesProperties.lineColor\": \"#252537\"\r\n        },\r\n        studies_overrides: {\r\n            \"volume.volume.color.0\": \"#ff5353\",\r\n            \"volume.volume.color.1\": \"#3fb68b\",\r\n            \"volume.volume ma.visible\": !1,\r\n            \"relative strength index.plot.color\": \"#5973fe\",\r\n            \"relative strength index.plot.linewidth\": 1.5,\r\n            \"relative strength index.hlines background.color\": \"#134A9F\"\r\n        },\r\n        loading_screen: {\r\n            backgroundColor: \"#1c1c28\",\r\n            foregroundColor: \"#1c1c28\"\r\n        },\r\n        theme: \"light\", //\"dark\"\r\n    }\r\n}\r\n\r\n//最新版\r\n//导出k线图配置\r\n//修改配置刷新不变，需要手动清除localstorage\r\nexport function TradingViewConfig() {\r\n    return {\r\n        debug: false,//调试模式，输出触碰图表事件等等。\r\n        fullscreen: false, //屏幕尺寸\r\n        symbol: null, //'AAPL',\r\n        // interval: localStorage.getItem('tradingview_interval') || '1D', //分时类型(周期)，默认日线\r\n        interval: localStorage.getItem('tradingview_interval') || '1', //分时类型(周期)，默认日线\r\n        autosize: true, //自动适应容器大小\r\n        container: \"chart_container\",\r\n        //\tBEWARE: no trailing slash is expected in feed URL\r\n        datafeed: null, //new Datafeeds.UDFCompatibleDatafeed(\"https://demo-feed-data.tradingview.com\"),//数据\r\n        library_path: \"charting_library/\", //资源库根路径\r\n        // custom_css_url: \"custom-styles.css\", //自定义样式文件。取消这个文件和theme: \"light\"，注释下面带有颜色的配置,就可以还原成白色主题。\r\n        locale: `${_vm.$t(\"locale\")}`, //语言，en：英文，zh：中文\r\n        timezone: \"Asia/Shanghai\",\r\n        // preset: \"mobile\",//是否移动端，移动端就没有什么控件\r\n        //禁用的功能\r\n        disabled_features: [\r\n            // \"use_localstorage_for_settings\",     //是否缓存配置。刷新网页保存之前打开的指标配置。\r\n            \"header_symbol_search\",\r\n            \"header_compare\",\r\n            \"symbol_search_hot_key\",\r\n            \"compare_symbol\",\r\n            \"symbol_info\",\r\n            \"go_to_date\",\r\n            \"timeframes_toolbar\",\r\n        ],\r\n        //开启的功能\r\n        enabled_features: [\r\n            \"header_resolutions\",\r\n            \"control_bar\",\r\n            \"edit_buttons_in_legend\",\r\n            \"hide_left_toolbar_by_default\",\r\n            \"hide_last_na_study_output\",\r\n            \"remove_library_container_border\",\r\n            \"dont_show_boolean_study_arguments\"\r\n        ],\r\n        // overrides: {\r\n        //     \"paneProperties.background\": \"#17171a\",\r\n        //     \"paneProperties.horzGridProperties.color\": \"#17171a\", //水平网格线颜色，默认：#313131\r\n        //     \"paneProperties.vertGridProperties.color\": \"#17171a\", //垂直网格线颜色，默认：#313131\r\n        //     \"paneProperties.crossHairProperties.style\": 1,\r\n        //     \"paneProperties.legendProperties.showBarChange\": !1,\r\n        //     \"paneProperties.topMargin\": 10,//上边距，k线距离标题\r\n        //     \"paneProperties.bottomMargin\": 10,//下边距，k线距离指标\r\n        //     \"mainSeriesProperties.style\": 1,\r\n        //     \"mainSeriesProperties.candleStyle.upColor\": \"#e53935\",//买入颜色\r\n        //     \"mainSeriesProperties.candleStyle.borderUpColor\": \"#b32b28\",//买入边框颜色\r\n        //     \"mainSeriesProperties.candleStyle.wickUpColor\": \"#e53935\",//买入线条颜色\r\n        //     \"mainSeriesProperties.candleStyle.downColor\": \"#4caf50\",//卖出颜色 \r\n        //     \"mainSeriesProperties.candleStyle.borderDownColor\": \"#47a34b\",//卖出边框颜色\r\n        //     \"mainSeriesProperties.candleStyle.wickDownColor\": \"#4caf50\",//卖出线条颜色\r\n        //     \"mainSeriesProperties.statusViewStyle.symbolTextSource\": \"ticker\",\r\n        //     \"scalesProperties.textColor\": \"#AAA\",\r\n        //     \"scalesProperties.backgroundColor\": \"#1c1c28\",\r\n        //     \"scalesProperties.lineColor\": \"#252537\",\r\n        //     // \"mainSeriesProperties.priceLineWidth\": 5,\r\n        // },\r\n        // studies_overrides: {\r\n        //     \"volume.volume.color.0\": \"#4caf50\",\r\n        //     \"volume.volume.color.1\": \"#e53935\",\r\n        //     \"volume.volume ma.visible\": !1,\r\n        //     \"relative strength index.plot.color\": \"#5973fe\",\r\n        //     \"relative strength index.plot.linewidth\": 1.5,\r\n        //     \"relative strength index.hlines background.color\": \"#134A9F\"\r\n        // },\r\n        // loading_screen: {\r\n        //     backgroundColor: \"#1c1c28\",\r\n        //     foregroundColor: \"#1c1c28\"\r\n        // },\r\n        // saved_data: {\r\n        //     study_templates: [\r\n        //         {\r\n        //             name: \"Default Indicators\",\r\n        //             studies: [\r\n        //                 \"Moving Average@tv-basicstudies\",  // 移动平均线\r\n        //                 \"MACD@tv-basicstudies\"            // MACD 指标\r\n        //             ]\r\n        //         }\r\n        //     ]\r\n        // }\r\n        // theme: \"dark\",//\"light\"     //主题色\r\n        theme: \"light\",\r\n    }\r\n}","<template>\r\n    <div>\r\n        <div id=\"chart_container\" style=\"height:100%;width:100%;position:absolute;\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { TradingViewConfig } from './const/const.js'\r\nimport axios from 'axios'\r\nimport dayjs from 'dayjs';\r\nimport gupiao from './data/gupiao.json'//上证指数\r\nimport time_5 from './data/min.json'//5分钟周期\r\nimport time_1 from './data/1M.json'//1分钟周期\r\n// 创建指定范围个数的随机数据\r\nfunction createAutoData(count, max, min) {\r\n    var autoData = new Array();\r\n    var Range = max - min;\r\n    for (var i = 0; i < count; i++) {\r\n        var Rand = Math.random();\r\n        autoData.push(min + Math.round(Rand * Range));\r\n    }\r\n    return autoData;\r\n}\r\nexport default {\r\n    name: '',\r\n    props: {\r\n    },\r\n    components: {\r\n\r\n    },\r\n    data() {\r\n        return {\r\n            name: '上证指数',//名称\r\n            tradingViewConfig: TradingViewConfig(),//k线图配置\r\n            chart: null,//k线图对象\r\n            feed: null,//数据对象\r\n            last_price: 1234.2365,\r\n            bars: [],//time：日期(毫秒单位时间戳)，close：收盘价，open：开盘价，high：最高价，low：最低价，volume：交易量\r\n            page: {\r\n                \"current\": 1,\r\n                // \"size\": 100,\r\n                \"size\": 500,\r\n                loading: false,\r\n                finish: false,\r\n            },\r\n        }\r\n    },\r\n    methods: {\r\n        //\r\n        createFeed() {\r\n            let _this_ = this;\r\n            let Datafeed = {};\r\n            Datafeed.DataPulseUpdater = function (datafeed, updateFrequency) {\r\n                this._datafeed = datafeed;\r\n                this._subscribers = {};\r\n                this._requestsPending = 0;\r\n                var that = this;\r\n                var update = function () {\r\n                    if (that._requestsPending > 0) {\r\n                        return;\r\n                    }\r\n                    for (var listenerGUID in that._subscribers) {\r\n                        var subscriptionRecord = that._subscribers[listenerGUID];\r\n                        var resolution = subscriptionRecord.resolution;\r\n                        var datesRangeRight = parseInt((new Date().valueOf()) / 1000);\r\n                        var datesRangeLeft = datesRangeRight - that.periodLengthSeconds(resolution, 10);\r\n                        that._requestsPending++;\r\n                        (function (_subscriptionRecord) {\r\n                            that._datafeed.getBars(_subscriptionRecord.symbolInfo, resolution, datesRangeLeft, datesRangeRight, function (bars) {\r\n                                that._requestsPending--;\r\n                                if (!that._subscribers.hasOwnProperty(listenerGUID)) {\r\n                                    return;\r\n                                }\r\n                                if (bars.length === 0) {\r\n                                    return;\r\n                                }\r\n                                var lastBar = bars[bars.length - 1];\r\n                                if (!isNaN(_subscriptionRecord.lastBarTime) && lastBar.time < _subscriptionRecord.lastBarTime) {\r\n                                    return;\r\n                                }\r\n                                var subscribers = _subscriptionRecord.listeners;\r\n                                var isNewBar = !isNaN(_subscriptionRecord.lastBarTime) && lastBar.time > _subscriptionRecord.lastBarTime;\r\n                                if (isNewBar) {\r\n                                    if (bars.length < 2) {\r\n                                        throw new Error('Not enough bars in history for proper pulse update. Need at least 2.');\r\n                                    }\r\n                                    var previousBar = bars[bars.length - 2];\r\n                                    for (var i = 0; i < subscribers.length; ++i) {\r\n                                        subscribers[i](previousBar);\r\n                                    }\r\n                                }\r\n                                _subscriptionRecord.lastBarTime = lastBar.time;\r\n                                for (let i = 0; i < subscribers.length; ++i) {\r\n                                    subscribers[i](lastBar);\r\n                                }\r\n                            },\r\n                                //\ton error\r\n                                function () {\r\n                                    that._requestsPending--;\r\n                                });\r\n                        })(subscriptionRecord);\r\n                    }\r\n                };\r\n                if (typeof updateFrequency != 'undefined' && updateFrequency > 0) {\r\n                    setInterval(update, updateFrequency);\r\n                }\r\n            };\r\n\r\n            Datafeed.DataPulseUpdater.prototype.periodLengthSeconds = function (resolution, requiredPeriodsCount) {\r\n                var daysCount = 0;\r\n                if (resolution === 'D') {\r\n                    daysCount = requiredPeriodsCount;\r\n                } else if (resolution === 'M') {\r\n                    daysCount = 31 * requiredPeriodsCount;\r\n                } else if (resolution === 'W') {\r\n                    daysCount = 7 * requiredPeriodsCount;\r\n                } else {\r\n                    daysCount = requiredPeriodsCount * resolution / (24 * 60);\r\n                }\r\n                return daysCount * 24 * 60 * 60;\r\n            };\r\n\r\n            Datafeed.DataPulseUpdater.prototype.subscribeDataListener = function (symbolInfo, resolution, newDataCallback, listenerGUID) {\r\n                this._datafeed._logMessage('Subscribing ' + listenerGUID);\r\n                if (!this._subscribers.hasOwnProperty(listenerGUID)) {\r\n                    this._subscribers[listenerGUID] = {\r\n                        symbolInfo: symbolInfo,\r\n                        resolution: resolution,\r\n                        lastBarTime: NaN,\r\n                        listeners: []\r\n                    };\r\n                }\r\n                this._subscribers[listenerGUID].listeners.push(newDataCallback);\r\n            };\r\n\r\n            Datafeed.DataPulseUpdater.prototype.unsubscribeDataListener = function (listenerGUID) {\r\n                this._datafeed._logMessage('Unsubscribing ' + listenerGUID);\r\n                delete this._subscribers[listenerGUID];\r\n            };\r\n\r\n            //container主要数据结构。\r\n            Datafeed.Container = function (updateFrequency) {\r\n                this._configuration = {\r\n                    supports_search: false, //支持搜索\r\n                    supports_group_request: false,\r\n                    // supported_resolutions: ['1','15','60', '1D'],//可切换的所有周期。['1', '3', '5', '15', '30', '60', '120', '240', '360', '720', '1D', '3D', '1W', '1M']\r\n                    // supported_resolutions: ['1D'],//['1', '3', '5', '15', '30', '60', '120', '240', '360', '720', '1D', '3D', '1W', '1M'],\r\n                    supported_resolutions: ['1', '3', '5', '15', '30', '60', '120', '240', '360', '720', '1D', '3D', '1W', '1M'],\r\n                    supports_marks: true,\r\n                    supports_timescale_marks: true,\r\n                    exchanges: ['smartbit'],//交易所名称\r\n                };\r\n                this._barsPulseUpdater = new Datafeed.DataPulseUpdater(this, updateFrequency || 10 * 1000);\r\n                this._enableLogging = true;\r\n                this._callbacks = {};\r\n                this._initializationFinished = true;\r\n                this._fireEvent('initialized');\r\n                this._fireEvent('configuration_ready');\r\n            };\r\n            Datafeed.Container.prototype._fireEvent = function (event, argument) {\r\n                if (this._callbacks.hasOwnProperty(event)) {\r\n                    var callbacksChain = this._callbacks[event];\r\n                    for (var i = 0; i < callbacksChain.length; ++i) {\r\n                        callbacksChain[i](argument);\r\n                    }\r\n                    this._callbacks[event] = [];\r\n                }\r\n            };\r\n            Datafeed.Container.prototype._logMessage = function (message) {\r\n                if (this._enableLogging) {\r\n                    var now = new Date();\r\n                    // console.log(\"CHART LOGS: \"+now.toLocaleTimeString() + '.' + now.getMilliseconds() + '> ' + message);\r\n                }\r\n            };\r\n            Datafeed.Container.prototype.on = function (event, callback) {\r\n                if (!this._callbacks.hasOwnProperty(event)) {\r\n                    this._callbacks[event] = [];\r\n                }\r\n                this._callbacks[event].push(callback);\r\n                return this;\r\n            };\r\n            //此方法可以设置图表库支持的图表配置\r\n            Datafeed.Container.prototype.onReady = function (callback) {\r\n                let that = this;\r\n                if (this._configuration) {\r\n                    setTimeout(function () {\r\n                        callback(that._configuration);\r\n                    }, 0);\r\n                }\r\n                else {\r\n                    this.on('configuration_ready', function () {\r\n                        callback(that._configuration);\r\n                    });\r\n                }\r\n            };\r\n            //通过商品名称解析商品信息\r\n            //symbolName(商品名称 或ticker), onSymbolResolvedCallback, onResolveErrorCallback\r\n            Datafeed.Container.prototype.resolveSymbol = function (symbolName, onSymbolResolvedCallback, onResolveErrorCallback) {\r\n\r\n                this._logMessage(\"GOWNO :: resolve symbol \" + symbolName);\r\n                Promise.resolve().then(() => {\r\n                    function adjustScale() {\r\n                        if (_this_.last_price > 1000)\r\n                            return 100;\r\n                        else\r\n                            return 100000000;\r\n                    }\r\n                    this._logMessage(\"GOWNO :: onResultReady inject \" + 'AAPL');\r\n                    // console.log(symbolName)\r\n                    onSymbolResolvedCallback({\r\n                        // \"name\":\"AAPL\",\r\n                        \"name\": _this_.name,\r\n                        \"symbol\": '55',//商品名称\r\n                        \"timezone\": \"Asia/Shanghai\",//\"Europe/Warsaw\",//这个商品的交易所时区\r\n                        \"pricescale\": adjustScale(),//价格精度\r\n                        \"minmov\": 1,//最小波动\r\n                        \"minmov2\": 0,\r\n                        \"ticker\": _this_.name,\r\n                        // \"ticker\": 'smartbit',//它是您的商品体系中此商品的唯一标识符\r\n                        \"description\": \"\",//商品说明。这个商品说明将被打印在图表的标题栏中。\r\n                        \"session\": \"24x7\",//商品交易时间。7*24小时(例如：比特币或其它数字货币)\r\n                        \"type\": \"bitcoin\",//仪表的可选类型。bitcoin比特币 \r\n                        // \"exchange-traded\": \"smartbit\",\r\n                        // \"exchange-listed\": \"smartbit\",\r\n                        \"has_intraday\": true,//布尔值显示商品是否具有日内（分钟）历史数据。\r\n                        \"intraday_multipliers\": ['1'],//这是一个包含日内周期(分钟单位)的数组，datafeed将会自行构建它。\r\n                        \"has_weekly_and_monthly\": false,//布尔值显示商品是否具有以W和M为单位的历史数据。\r\n                        \"has_no_volume\": false,//布尔表示商品是否拥有成交量数据。\r\n                        \"regular_session\": \"24x7\",\r\n                        // \"timeScale.rightOffset\": 50,\r\n                        //     'timeScale':{\r\n                        //         'barSpacing':'19.119813271949624'\r\n                        //     }\r\n                    });\r\n                })\r\n            };\r\n            //当图表库需要由日期范围定义的历史K线片段时，将调用此函数\r\n            //旧版getBars回调函数有六个参数，新版的回调函数只有五个。\r\n            //旧版：getBars(symbolInfo, resolution, rangeStartDate, rangeEndDate, onDataCallback, onErrorCallback)\r\n            //新版：getBars(symbolInfo, resolution, periodParams, onHistoryCallback, onErrorCallback)，旧版的rangeStartDate, rangeEndDate这两个值被放在了periodParams，并且新增了两个值。\r\n            Datafeed.Container.prototype.getBars = async function (symbolInfo, interval, periodParams, onHistoryCallback, onErrorCallback) {\r\n                console.log('获取分页历史K线事件：', symbolInfo, interval, periodParams)\r\n                // 将interval周期作为参数请求\r\n                if (periodParams.firstDataRequest == true) {    //首次加載\r\n                    _this_.page.current = 1;\r\n                }\r\n                // const klines = await _this_.getListData().catch(err => {\r\n                //     onErrorCallback('Klines data error');\r\n                // });\r\n                const klines = await _this_.getListData2().catch(err => {\r\n                    onErrorCallback('Klines data error');\r\n                });\r\n                console.log('获取的K线数据：', klines)\r\n                _this_.page.current += 1;\r\n                if (klines.length > 0) {\r\n                    return onHistoryCallback(klines)\r\n                } else {\r\n                    return onHistoryCallback([], { noData: true });\r\n                }\r\n            };\r\n            Datafeed.Container.prototype.getMarks = function (symbolInfo, startDate, endDate, onDataCallback, resolution) {\r\n                var marks = _this_.getMarks();\r\n                setTimeout(() => {\r\n                    onDataCallback(marks);\r\n                }, 0);\r\n            };\r\n            //实时K线，新增K线。\r\n            const subscribeKline = ({ symbol, interval, uniqueID }, callback) => {\r\n                return _this_.createRandData((res) => {\r\n                    callback(res)\r\n                });\r\n            }\r\n            //订阅K线数据\r\n            // Datafeed.Container.prototype.subscribeBars = function (symbolInfo, resolution, onRealtimeCallback, listenerGUID, onResetCacheNeededCallback) {\r\n            Datafeed.Container.prototype.subscribeBars = function (symbolInfo, interval, onRealtimeCallback, subscribeUID, onResetCacheNeededCallback) {\r\n                setInterval(() => {\r\n                    subscribeKline({ symbol: symbolInfo.name, interval, uniqueID: subscribeUID, }, cb => onRealtimeCallback(cb))\r\n                }, 5000)\r\n            };\r\n            //取消订阅K线数据\r\n            Datafeed.Container.prototype.unsubscribeBars = function (listenerGUID) {\r\n                this._barsPulseUpdater.unsubscribeDataListener(listenerGUID);\r\n            };\r\n            return new Datafeed.Container;\r\n        },\r\n        //标记。K线上标注。\r\n        getMarks() {\r\n            //自定义背景颜色\r\n            var buyColor = { background: \"#4caf50\" };\r\n            var sellColor = { background: \"#e53935\" };\r\n            var marks = [];\r\n            let bsAll = [{\r\n                id: 232323,\r\n                time: '2023-02-10 17:00:00',\r\n                type: 'buy',\r\n                text: '港股节期停市！',\r\n                label: '注',\r\n            }, {\r\n                id: 23233,\r\n                time: '2023-02-05 17:00:00',\r\n                type: 'sell',\r\n                text: '三只松鼠股东减持2%！',\r\n                label: '事',\r\n            }]\r\n            bsAll = []\r\n            bsAll.map((v, o) => {\r\n                var mark = {};\r\n                mark.id = v.id;  //id 是根据k线的id 确定的唯一性\r\n                // mark.time = v.time / 1000; //时间也是唯一的  / 1000取决于后台返回你的数据\r\n                mark.time = new Date(v.time).getTime() / 1000;\r\n                mark.color = v.type == \"buy\" ? buyColor : sellColor;\r\n                mark.text = v.text;\r\n                mark.label = v.label;\r\n                mark.labelFontColor = \"#fff\";//文字颜色\r\n                mark.minSize = 20;//尺寸\r\n                marks.push(mark);\r\n            });\r\n            return marks;\r\n        },\r\n        //初始化图表\r\n        async initTv() {\r\n            this.feed = this.createFeed();\r\n            this.tradingViewConfig.symbol = this.name;//'AAPL'\r\n            this.tradingViewConfig.datafeed = this.feed;\r\n            // this.tradingViewConfig.datafeed = new Datafeeds.UDFCompatibleDatafeed(\"https://demo-feed-data.tradingview.com\");//this.feed;\r\n            console.log('tradingview的配置：', this.tradingViewConfig)\r\n            this.chart = new TradingView.widget(this.tradingViewConfig);\r\n            this.chart.onChartReady(() => {\r\n                //切换分时图\r\n                // this.chart.subscribe(\"time_interval\",res=>{\r\n                //     localStorage.setItem('tradingview_interval',res.label);\r\n                //     this.bars=[];\r\n                //     this.changePair();\r\n                //     sendMsg({cmd:'tradingview',data:res.label});\r\n                // });\r\n                //重置按钮 undo_redo_state_changed：缩放改变事件\r\n                this.chart.subscribe(\"reset_scales\", () => {\r\n                })\r\n                //移动平均线 旧版（蓝色logo，悬浮可缩放）\r\n                // this.chart.chart().createStudy(\"Moving Average\", false, false, [5, \"close\", 0], null, { \"Plot.color\": \"#e7eff2\", \"Plot.linewidth\": 0, });\r\n                // this.chart.chart().createStudy(\"Moving Average\", false, false, [10, \"close\", 0], null, { \"Plot.color\": \"#e6f562\", \"Plot.linewidth\": 0, });\r\n                // this.chart.chart().createStudy(\"Moving Average\", false, false, [20, \"close\", 0], null, { \"Plot.color\": \"#cc01bf\", \"Plot.linewidth\": 0, });\r\n                //移动平均线 最新版（黑色logo，悬浮可缩放）\r\n                //报错：TypeError: c.inputs[d].indexOf is not a function\r\n                //原因就是上面是旧版的函数，下面是新版的不会报错。\r\n                this.chart.chart().createStudy(\"Moving Average\", false, false, {\r\n                    length: 5, // 确保数值正确\r\n                    color: \"#e7eff2\" // 颜色要用字符串格式\r\n                });\r\n                this.chart.chart().createStudy(\"Moving Average\", false, false, {\r\n                    length: 10, // 确保数值正确\r\n                    color: \"#e6f562\" // 颜色要用字符串格式\r\n                });\r\n                this.chart.chart().createStudy(\"Moving Average\", false, false, {\r\n                    length: 20, // 确保数值正确\r\n                    color: \"#cc01bf\" // 颜色要用字符串格式\r\n                });\r\n                // 添加 MACD 指标\r\n                this.chart.chart().createStudy(\"MACD\", false, false);\r\n                // this.chart.activeChart().createStudy(\"MACD\", false, false);\r\n\r\n                this.chart.activeChart().resetData();\r\n            });\r\n        },\r\n        //创建实时随机数据（新增时间超过周期时间就会新增一条新的K线。\r\n        createRandData(callback) {\r\n            console.log('随机实时K线')\r\n            //time：日期(毫秒单位时间戳)，close：收盘价，open：开盘价，high：最高价，low：最低价，volume：交易量\r\n            let lastPrice = this.bars[this.bars.length - 1].low;\r\n            let p = lastPrice * 0.1;\r\n            let obj = {\r\n                time: new Date().getTime(),\r\n                close: createAutoData(1, lastPrice + p, lastPrice - p)[0],\r\n                open: createAutoData(1, lastPrice + (p / 2), lastPrice - (p / 2))[0],\r\n                high: createAutoData(1, lastPrice + p, lastPrice - p)[0],\r\n                low: createAutoData(1, lastPrice + p, lastPrice - p)[0],\r\n                volume: 100000 * Math.random()\r\n            };\r\n            this.bars.push(obj);\r\n            callback && callback(obj)\r\n        },\r\n        //根据接口获取\r\n        async getListData2() {\r\n            if (this.page.loading) return;\r\n            let d = {\r\n                \"current\": this.page.current,\r\n                \"size\": this.page.size,\r\n            };\r\n            this.page.loading = true;\r\n            return new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    let _gupiao = JSON.parse(JSON.stringify(gupiao));\r\n                    let list = _gupiao.reverse().slice((d.current - 1) * d.size, d.current * d.size);//分页获取\r\n                    // let list = _gupiao.slice((d.current - 1) * d.size, d.current * d.size);//分页获取\r\n                    list = list.reverse();\r\n                    let arr = [];\r\n                    list.forEach(item => {\r\n                        arr.push({\r\n                            // t: item.d,\r\n                            time: dayjs(item.d + ' 00:00:00').valueOf(),\r\n                            close: item.c,\r\n                            open: item.o,\r\n                            high: item.h,\r\n                            low: item.l,\r\n                            volume: item.v,\r\n                        })\r\n                    })\r\n                    if (arr.length >= d.size) {\r\n                        this.page.finish = false;\r\n                    } else {\r\n                        this.page.finish = true;\r\n                    }\r\n                    if (d.current == 1) {\r\n                        this.bars = arr;\r\n                    } else {\r\n                        this.bars = arr.concat(this.bars);\r\n                    }\r\n                    this.page.loading = false;\r\n                    //测试没有多余数据\r\n                    // if (d.current >= 2) {\r\n                    //     resolve([])\r\n                    //     return;\r\n                    // }\r\n                    resolve(arr)\r\n                }, 3000)\r\n            })\r\n        },\r\n        //根据接口获取\r\n        async getListData() {\r\n            if (this.page.loading) return;\r\n            let d = {\r\n                \"current\": this.page.current,\r\n                \"size\": this.page.size,\r\n            };\r\n            this.page.loading = true;\r\n            return new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    // let _gupiao = JSON.parse(JSON.stringify(time_5)).Data.Datasets;\r\n                    let _gupiao = JSON.parse(JSON.stringify(time_1)).Data.Datasets;\r\n                    let list = _gupiao.reverse().slice((d.current - 1) * d.size, d.current * d.size);//分页获取\r\n                    list = list.reverse();\r\n                    let arr = [];\r\n                    list.forEach(item => {\r\n                        arr.push({\r\n                            time: dayjs(item.Date + ' ' + item.Time + ':00').valueOf(),\r\n                            close: item.Close,\r\n                            open: item.Open,\r\n                            high: item.High,\r\n                            low: item.Low,\r\n                            volume: item.Volume,\r\n                        })\r\n                    })\r\n                    if (arr.length >= d.size) {\r\n                        this.page.finish = false;\r\n                    } else {\r\n                        this.page.finish = true;\r\n                    }\r\n                    if (d.current == 1) {\r\n                        this.bars = arr;\r\n                    } else {\r\n                        this.bars = arr.concat(this.bars);\r\n                    }\r\n                    this.page.loading = false;\r\n                    //测试没有多余数据\r\n                    // if (d.current >= 2) {\r\n                    //     resolve([])\r\n                    //     return;\r\n                    // }\r\n                    resolve(arr)\r\n                }, 3000)\r\n            })\r\n        },\r\n        //切换周期，需要重置\r\n        changePair() {\r\n            if (this.chart && this.feed) {\r\n                this.feed._fireEvent('pair_change');\r\n                this.chart.activeChart().zoomOut();\r\n                // this.chart.activeChart().createExecutionShape().setArrowSpacing(50);\r\n                // this.chart.setSymbol('最帅','1');\r\n                //切换名称和周期\r\n                // this.chart.activeChart().setSymbol(this.area.text, () => {\r\n                // });\r\n                this.chart.activeChart().resetData();\r\n            }\r\n        },\r\n        //获取数据\r\n        search() {\r\n            this.page.current = 1;\r\n            this.page.finish = false;\r\n            this.initTv();\r\n        }\r\n    },\r\n    mounted() {\r\n        this.search();\r\n    },\r\n    computed: {\r\n        //多语言切换\r\n        lang() {\r\n            return this.$i18n.locale;\r\n        }\r\n    },\r\n    watch: {\r\n        //监听多语言切换\r\n        lang() {\r\n            this.tradingViewConfig.locale = `${this.$t(\"locale\")}`;\r\n            this.tradingViewConfig.datafeed = this.feed;\r\n            this.chart = new TradingView.widget(this.tradingViewConfig);\r\n        },\r\n        pair(newVal, oldVal) {\r\n            this.changePair();\r\n        },\r\n        'area': {\r\n            handler: function (val, value) {\r\n                // this.search();\r\n            },\r\n            deep: true,\r\n            immediate: false\r\n        }\r\n    },\r\n    beforeDestroy() {\r\n        this.chart = null;\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang='less'></style>","import mod from \"-!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../node_modules/_babel-loader@8.4.1@babel-loader/lib/index.js!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!./tradingviewDemo.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../node_modules/_babel-loader@8.4.1@babel-loader/lib/index.js!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/_vue-loader@15.11.1@vue-loader/lib/index.js??vue-loader-options!./tradingviewDemo.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./tradingviewDemo.vue?vue&type=template&id=262ee22b\"\nimport script from \"./tradingviewDemo.vue?vue&type=script&lang=js\"\nexport * from \"./tradingviewDemo.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/_vue-loader@15.11.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}